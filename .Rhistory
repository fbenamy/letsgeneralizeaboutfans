#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- rbind(ci_upper, c(q1, q3), ci_lower)
conf_int <- cbind(c("97.5%", "Expected Value", "2.5%"), conf_int)
conf_int
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower)
conf_int <- cbind(c("97.5%", "Expected Value", "2.5%"), conf_int)
conf_int
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower),2)
conf_int <- cbind(c("97.5%", "Expected Value", "2.5%"), conf_int)
conf_int
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower),2)
conf_int <- t(cbind(c("97.5%", "Expected Value", "2.5%"), conf_int))
conf_int
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower),2)
conf_int <- t( conf_int)
conf_int
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower),2)
conf_int <- t( conf_int)
rowname(conf_int)
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower),2)
conf_int <- t( conf_int)
rownames(conf_int)
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower),2)
conf_int <- t( conf_int)
rownames(conf_int) <- c("Q1", "Q3")
colnames(conf_int) <-("97.5%", "Mean", "2.5%")
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower),2)
conf_int <- t( conf_int)
rownames(conf_int) <- c("Q1", "Q3")
colnames(conf_int) <- c("97.5%", "Mean", "2.5%")
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_upper, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_lower),2)
conf_int <- t( conf_int)
rownames(conf_int) <- c("Q1", "Q3")
colnames(conf_int) <- c("97.5%", "Mean", "2.5%")
conf_int
#get quantiles
q1 <- quantile(crab$weight, .25)
q3 <- quantile(crab$weight, .75)
quantile.predict <- predict(fit.logistic, newdata = data.frame(weight = c(q1, q3)), type = "link", se = TRUE)
#get predicted log odds
log.odds.hat <- quantile.predict$fit
se <- quantile.predict$se.fit
ci_upper <- log.odds.hat +  qnorm(0.975) * se
ci_upper <- exp(ci_upper)/ (1 +exp(ci_upper))
ci_lower <- log.odds.hat -  qnorm(0.975) * se
ci_lower <- exp(ci_lower)/ (1 +exp(ci_lower))
conf_int <- round(rbind(ci_lower, exp(log.odds.hat)/(1 + exp(log.odds.hat)), ci_upper),2)
conf_int <- t( conf_int)
rownames(conf_int) <- c("Q1", "Q3")
colnames(conf_int) <- c("2.5%", "Mean", "97.5%")
conf_int
plotdata$lowbound <- plotdata$logit - qnorm(0.975) * plotdata$se
predicted.prob.ci <- predict(fit.logistic, newdata = data.frame(weight = weight_vector), type = "link", se = TRUE)
plotdata <- data.frame(weight = weight_vector)
plotdata$logit <- predicted.prob.ci$fit
plotdata$se <- predicted.prob.ci$se.fit
plotdata$lowbound <- plotdata$logit - qnorm(0.975) * plotdata$se
plotdata$upbound <- plotdata$logit + qnorm(0.975) * plotdata$se
plotdata$prob <- 1/(1 + exp(-plotdata$logit))
plotdata$lowbound.prob <- 1/(1 + exp(~plotdata$lowbound))
predicted.prob.ci <- predict(fit.logistic, newdata = data.frame(weight = weight_vector), type = "link", se = TRUE)
plotdata <- data.frame(weight = weight_vector)
plotdata$logit <- predicted.prob.ci$fit
plotdata$se <- predicted.prob.ci$se.fit
plotdata$lowbound <- plotdata$logit - qnorm(0.975) * plotdata$se
plotdata$upbound <- plotdata$logit + qnorm(0.975) * plotdata$se
plotdata$prob <- 1/(1 + exp(-plotdata$logit))
plotdata$lowbound.prob <- 1/(1 + exp(-plotdata$lowbound))
plotdata$upbound.prob <- 1/(1 + exp(-plotdata$upbound))
ggplot(plotdata, aes(x = weight, y = prob)) + geom_lien(color = "blue") + geom_ribbon(aes(ymin = lowbound.prob, ymax = upbound.prob), fill = "blue", alpha = 0.2) + labs(x = "Weight(in Grams)", y = "Probabilty of a Nearby Mate")
ggplot(plotdata, aes(x = weight, y = prob)) + geom_lien(color = "blue") + geom_ribbon(aes(ymin = lowbound.prob, ymax = upbound.prob), fill = "blue", alpha = 0.2) + labs(x = "Weight(in Grams)", y = "Probabilty of a Nearby Mate")
ggplot(plotdata, aes(x = weight, y = prob)) + geom_line(color = "blue") + geom_ribbon(aes(ymin = lowbound.prob, ymax = upbound.prob), fill = "blue", alpha = 0.2) + labs(x = "Weight(in Grams)", y = "Probabilty of a Nearby Mate")
middle <- q3 - q1
middle
middle <- q3 - q1
middle
log.odds.hat
exp(log.odds.hat)/(1 + exp(log.odds.hat))
quant_probs <- exp(log.odds.hat)/(1 + exp(log.odds.hat))
quant_probs <- exp(log.odds.hat)/(1 + exp(log.odds.hat))
quant_probs[2] - quant_probs[1]
middle <- q3 - q1
quant_probs <- exp(log.odds.hat)/(1 + exp(log.odds.hat))
(quant_probs[2] - quant_probs[1])/middle
middle <- q3 - q1
quant_probs <- exp(log.odds.hat)/(1 + exp(log.odds.hat))
increase <- (quant_probs[2] - quant_probs[1])/middle
increase
exp(coef(fit.logistic)[2])
exp(1000* coef(fit.logistic)[2])
color.fit <- fit.logistic <- glm(y ~ weight + factor(color), family = binomial, data = crab)
tidy(color.fit)
summary(color.fit)
anova(color.fit, test = "LRT")
install.packages("plotROC")
)
library(plotROC)
width.fit <- glm(y ~ weight + width + factor(color), family = binomial, data = crab)
predict.width <- predict(width.fit, data = crab)
crab$width.predict <- fitted(width.fit)
crab$width.cut <- as.numeric(crab$color >= .5)
addmargins(confusion)
confusion <- table(crab$y, crab$width.cut)
addmargins(confusion)
width.fit <- glm(y ~ weight + width + factor(color), family = binomial, data = crab)
crab$width.predict <- fitted(width.fit)
crab$width.cut <- as.numeric(crab$color >= .5)
confusion <- table(crab$y, crab$width.cut)
addmargins(confusion)
width.fit <- glm(y ~ weight + width + factor(color), family = binomial, data = crab)
crab$width.predict <- fitted(width.fit)
crab$width.cut <- as.numeric(crab$width.predict >= .5)
confusion <- table(crab$y, crab$width.cut)
addmargins(confusion)
width.fit <- glm(y ~ weight + width + factor(color), family = binomial, data = crab)
crab$width.predict <- fitted(width.fit)
crab$width.cut <- as.numeric(crab$width.predict >= .5)
confusion <- table(crab$y, crab$width.cut)
addmargins(confusion)
sensitivity = confusion[2,2]/confusion[1,2]
specificity = confusion[2,1]/confusion[1,1]
print(sensitivity, specificity)
width.fit <- glm(y ~ weight + width + factor(color), family = binomial, data = crab)
crab$width.predict <- fitted(width.fit)
crab$width.cut <- as.numeric(crab$width.predict >= .5)
confusion <- table(crab$y, crab$width.cut)
addmargins(confusion)
sensitivity = confusion[2,2]/confusion[1,2]
specificity = confusion[2,1]/confusion[1,1]
print(sensitivity)
prin(specificity)
print(specificity)
width.fit <- glm(y ~ weight + width + factor(color), family = binomial, data = crab)
crab$width.predict <- fitted(width.fit)
crab$width.cut <- as.numeric(crab$width.predict >= .5)
confusion <- table(crab$y, crab$width.cut)
addmargins(confusion)
sensitivity = confusion[2,2]/confusion[1,2]
specificity = confusion[2,1]/confusion[1,1]
print(sensitivity)
print(specificity)
sensitivity_width = confusion_width[2,2]/confusion_width[1,2]
width.fit <- glm(y ~ weight + width + factor(color), family = binomial, data = crab)
crab$width.predict <- fitted(width.fit)
crab$width.cut <- as.numeric(crab$width.predict >= .5)
confusion_width <- table(crab$y, crab$width.cut)
addmargins(confusion_width)
sensitivity_width = confusion_width[2,2]/confusion_width[1,2]
specificity_width = confusion_width[2,1]/confusion_width[1,1]
print(sensitivity_width)
print(specificity_width)
crab$color.predict <- fitted(color.fit)
crab$color.cut <- as.numeric(crab$color.predict >= .5)
confusion_color <- table(crab$y, crab$color.cut)
addmargins(confusion_color)
sensitivity_color = confusion_color[2,2]/confusion_color[1,2]
specificity_color = confusion_color[2,1]/confusion_color[1,1]
print(sensitivity_color)
print(specificity_color)
install.packages(caret)
library(tidyverse)
library(broom)
library(plotROC)
l
install.packages("caret")
library(caret)
c <- 0.5
truth_color <- factor(crab$y, labels = c("0", "1"))
prediction_color <- factor(fitted(color.fit)) > c, labels = c("0", "1"))
c <- 0.5
truth_color <- factor(crab$y, labels = c("0", "1"))
prediction_color <- factor(fitted(color.fit)> c, labels = c("0", "1"))
sensitivity(data = prediction_color, reference = truth_color, negative = "0")
specificity(data = prediciton_color, reference = truth_color, negative = "0")
specificity(data = prediction_color, reference = truth_color, negative = "0")
sensitivity(data = prediction_color, reference = truth_color, positive = "1")
specificity(data = prediction_color, reference = truth_color, negative = "0")
width.fit <- glm(y ~ weight + width + factor(color), family = binomial, data = crab)
truth_width <- factor(crab$y, labels = c("0", "1"))
prediction_width <- factor(fitted(width.fit)> c, labels = c("0", "1"))
sensitivity(data = prediction_width, reference = truth_width, positive = "1")
specificity(data = prediction_width, reference = truth_width, negative = "0")
df <- data.frame(response = crab$y, model1 = fitted(color.fit), model2 = fitted(width.fit))
ggplot(df, aes(d = response, m = model1)) + geom_roc(cutoffs.a = c(0.5, 0.2, .01, .05,.01), laberound= 2)
df <- data.frame(response = crab$y, model1 = fitted(color.fit), model2 = fitted(width.fit))
df.long <- df %>% gather(model1, model2, key = "model", value = "predictions",)
ggplot(df.long, aes(d = response, m = predictions, color = model)) + geom_roc(cutoffs.a = c(0.5, 0.2, .01, .05,.01), labelround= 2) +
df <- data.frame(response = crab$y, model1 = fitted(color.fit), model2 = fitted(width.fit))
df.long <- df %>% gather(model1, model2, key = "model", value = "predictions",)
ggplot(df.long, aes(d = response, m = predictions, color = model)) + geom_roc(cutoffs.at= c(0.5, 0.2, .01, .05,.01), labelround= 2) +
df <- data.frame(response = crab$y, model1 = fitted(color.fit), model2 = fitted(width.fit))
df.long <- df %>% gather(model1, model2, key = "model", value = "predictions",)
ggplot(df.long, aes(d = response, m = predictions, color = model)) + geom_roc(cutoffs.at= c(0.5, 0.2, .01, .05,.01), labelround= 2) +
df <- data.frame(response = crab$y, model1 = fitted(color.fit), model2 = fitted(width.fit))
df.long <- df %>% gather(model1, model2, key = "model", value = "predictions",)
ggplot(df.long, aes(d = response, m = predictions, color = model)) + geom_roc(cutoffs.at= c(0.5, 0.2, .01, .05,.01), labelround= 2)
df <- data.frame(response = crab$y, model1 = fitted(color.fit), model2 = fitted(width.fit))
df.long <- df %>% gather(model1, model2, key = "model", value = "predictions",)
p <- ggplot(df.long, aes(d = response, m = predictions, color = model)) +   geom_roc(cutoffs.at= c(0.5, 0.2, .01, .05,.01), labelround= 2)
p
calc_auc(p)
calc_auc(p)
calc_auc(p)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
setwd("~/Documents/GradSchool/Stats2/Homework")
crab <- read_csv("datasets/crab.csv")
factor(crab$color)
weight_vector <- seq(min(crab$weight), max(crab$weight))
color.fit <- fit.logistic <- glm(y ~ weight + factor(color), family = binomial, data = crab)
predicted.prob.1 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 1), type = "link", se = TRUE)
ggplot(plot_data, aes(weight_vector, prob1)) + geom_line(aes(weight_vector, prob2))
weight_vector <- seq(min(crab$weight), max(crab$weight))
color.fit <- fit.logistic <- glm(y ~ weight + factor(color), family = binomial, data = crab)
predicted.prob.1 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 1), type = "link", se = TRUE)
predicted.prob.2 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 2), type = "link", se = TRUE)
predicted.prob.3 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 3), type = "link", se = TRUE)
predicted.prob.4 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 4), type = "link", se = TRUE)
plot_data <- data.frame(weight_vector)
plot_data$prob1 <- plotdata$prob <- 1/(1 + exp(-predicted.prob.1$fit))
weight_vector <- seq(min(crab$weight), max(crab$weight))
color.fit <- fit.logistic <- glm(y ~ weight + factor(color), family = binomial, data = crab)
predicted.prob.1 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 1), type = "link", se = TRUE)
predicted.prob.2 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 2), type = "link", se = TRUE)
predicted.prob.3 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 3), type = "link", se = TRUE)
predicted.prob.4 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 4), type = "link", se = TRUE)
plot_data <- data.frame(weight_vector)
plot_data$prob1 <- plot_data$prob1 <- 1/(1 + exp(-predicted.prob.1$fit))
plot_data$prob2 <- plot_data$prob2 <- 1/(1 + exp(-predicted.prob.2$fit))
plot_data$prob3 <- plot_data$prob3 <- 1/(1 + exp(-predicted.prob.3$fit))
plot_data$prob4 <- plot_data$prob4<- 1/(1 + exp(-predicted.prob.4$fit))
ggplot(plot_data, aes(weight_vector, prob1)) + geom_line(aes(weight_vector, prob2))
ggplot(plot_data, aes(weight_vector, prob1)) + geom_line(aes(weight_vector, prob2))
weight_vector <- seq(min(crab$weight), max(crab$weight))
color.fit <- fit.logistic <- glm(y ~ weight + factor(color), family = binomial, data = crab)
predicted.prob.1 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 1), type = "link", se = TRUE)
predicted.prob.2 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 2), type = "link", se = TRUE)
predicted.prob.3 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 3), type = "link", se = TRUE)
predicted.prob.4 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 4), type = "link", se = TRUE)
plot_data <- data.frame(weight_vector)
plot_data$prob1 <- plot_data$prob1 <- 1/(1 + exp(-predicted.prob.1$fit))
plot_data$prob2 <- plot_data$prob2 <- 1/(1 + exp(-predicted.prob.2$fit))
plot_data$prob3 <- plot_data$prob3 <- 1/(1 + exp(-predicted.prob.3$fit))
plot_data$prob4 <- plot_data$prob4 <- 1/(1 + exp(-predicted.prob.4$fit))
plot_data <- plot_data %>% gather("color", "probability", ~weight_vector)
weight_vector <- seq(min(crab$weight), max(crab$weight))
color.fit <- fit.logistic <- glm(y ~ weight + factor(color), family = binomial, data = crab)
predicted.prob.1 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 1), type = "link", se = TRUE)
predicted.prob.2 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 2), type = "link", se = TRUE)
predicted.prob.3 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 3), type = "link", se = TRUE)
predicted.prob.4 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 4), type = "link", se = TRUE)
plot_data <- data.frame(weight_vector)
plot_data$prob1 <- plot_data$prob1 <- 1/(1 + exp(-predicted.prob.1$fit))
plot_data$prob2 <- plot_data$prob2 <- 1/(1 + exp(-predicted.prob.2$fit))
plot_data$prob3 <- plot_data$prob3 <- 1/(1 + exp(-predicted.prob.3$fit))
plot_data$prob4 <- plot_data$prob4 <- 1/(1 + exp(-predicted.prob.4$fit))
plot_data <- plot_data %>% gather("color", "probability", -weight_vector)
head(plot_data)
tail(plot_data)
nrow(plot_data)
nrow(weight_vector)
length(weight_vector)
weight_vector <- seq(min(crab$weight), max(crab$weight))
color.fit <- fit.logistic <- glm(y ~ weight + factor(color), family = binomial, data = crab)
predicted.prob.1 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 1), type = "link", se = TRUE)
predicted.prob.2 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 2), type = "link", se = TRUE)
predicted.prob.3 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 3), type = "link", se = TRUE)
predicted.prob.4 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 4), type = "link", se = TRUE)
plot_data <- data.frame(weight_vector)
plot_data$prob1 <- plot_data$prob1 <- 1/(1 + exp(-predicted.prob.1$fit))
plot_data$prob2 <- plot_data$prob2 <- 1/(1 + exp(-predicted.prob.2$fit))
plot_data$prob3 <- plot_data$prob3 <- 1/(1 + exp(-predicted.prob.3$fit))
plot_data$prob4 <- plot_data$prob4 <- 1/(1 + exp(-predicted.prob.4$fit))
plot_data <- plot_data %>% gather("color", "probability", -weight_vector)
ggplot(plot_data, aes(weight_vector, probability, group = probability)) + geom_line()
ggplot(plot_data, aes(weight_vector, probability, group = color)) + geom_line()
ggplot(plot_data, aes(weight_vector, probability, group = color, fill = color)) + geom_line()
ggplot(plot_data, aes(weight_vector, probability, group = color, col = color)) + geom_line()
library(wesanderson)
ggplot(plot_data, aes(weight_vector, probability, group = color, col = color)) + geom_line() + scale_fill_manual(name = "Color of Crab",
labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability, group = color, col = color)) + geom_line() + scale_fill_manual(name = "Color of Crab",
breaks = c("prob1", "prob2",
"prob3", "prob4")
labels = c("medium-light", "medium",
ggplot(plot_data, aes(weight_vector, probability, group = color, col = color)) + geom_line() + scale_fill_manual(name = "Color of Crab",
breaks = c("prob1", "prob2",
"prob3", "prob4"),
labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability, group = color, col = color)) + geom_line() + scale_fill_discrete(name = "Color of Crab",
breaks = c("prob1", "prob2",
"prob3", "prob4"),
labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability, group = color, col = color)) + geom_line() + scale_fill_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability, group = color, fill = color)) + geom_line() + scale_fill_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability, fill = color)) + geom_line() + scale_fill_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability,fill = color)) + geom_line() + scale_fill_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability)) + geom_line() + scale_fill_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(fill = color)) + scale_fill_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_fill_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_fill_manual(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_shape_manual(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_shape_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark"))
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \n by Color"")
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \n by Color")
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color")
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color", xlab = "Weight (in grams)")
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color", xlabs = "Weight (in grams)", )
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color", x_lab = "Weight (in grams)", )
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color", x_lab = "Weight (in grams)")
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color", xlabs = "Weight (in grams)")
?labs
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color", xlab= "Weight (in grams)")
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color", xlab("Weight (in grams)")
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color", xlab("Weight (in grams)"))
?ggtitle
?ggtitle
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color") + xlab("Weight (in grams)") + ylabe("Probability of Having a Mate ")
ggplot(plot_data, aes(weight_vector, probability)) + geom_line(aes(color = color)) + scale_color_discrete(name = "Color of Crab", breaks = c("prob1", "prob2", "prob3", "prob4"),labels = c("medium-light", "medium",
"medium-dark", "dark")) +
labs(title = "Probability of Having a Mate \nby Color") + xlab("Weight (in grams)") + ylab("Probability of Having a Mate")
weight_vector <- seq(min(crab$weight), max(crab$weight))
color.fit <- glm(y ~ weight + factor(color), family = binomial, data = crab)
predicted.prob.1 <- predict(color.fit, newdata = data.frame(weight = weight_vector, color = 1), type = "link", se = TRUE)
predicted.prob.2 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 2), type = "link", se = TRUE)
predicted.prob.3 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 3), type = "link", se = TRUE)
predicted.prob.4 <- predict(fit.logistic, newdata = data.frame(weight = weight_vector, color = 4), type = "link", se = TRUE)
plot_data <- data.frame(weight_vector)
plot_data$prob1 <- plot_data$prob1 <- 1/(1 + exp(-predicted.prob.1$fit))
plot_data$prob2 <- plot_data$prob2 <- 1/(1 + exp(-predicted.prob.2$fit))
plot_data$prob3 <- plot_data$prob3 <- 1/(1 + exp(-predicted.prob.3$fit))
plot_data$prob4 <- plot_data$prob4 <- 1/(1 + exp(-predicted.prob.4$fit))
plot_data <- plot_data %>% gather("color", "probability", -weight_vector)
prediction <- predict(color.fit, newdata = data.frame(weight = 1.5 * 1000, color = 3), type = 'link', se = TRUE)
mean_predict <- 1/(1 + exp(-prediction$fit))
lowbound <- prediction$fit - norm(0.975) * prediction$se
prediction <- predict(color.fit, newdata = data.frame(weight = 1.5 * 1000, color = 3), type = 'link', se = TRUE)
mean_predict <- 1/(1 + exp(-prediction$fit))
lowbound <- prediction$fit - (qnorm(0.975) * prediction$se)
upbound <- prediction$fit + (qnorm(0.975) * prediction$se)
lowbound <- 1/(1 + exp(-lowbound))
upbound <- 1/(1 + exp(-upbound))
print(paste(lowbound, mean_predict, upbound))
prediction <- predict(color.fit, newdata = data.frame(weight = 1.5 * 1000, color = 3), type = 'link', se = TRUE)
mean_predict <- 1/(1 + exp(-prediction$fit))
lowbound <- prediction$fit - (qnorm(0.975) * prediction$se)
upbound <- prediction$fit + (qnorm(0.975) * prediction$se)
lowbound <- 1/(1 + exp(-lowbound))
upbound <- 1/(1 + exp(-upbound))
print(paste(lowbound, mean_predict, upbound))
lacross <- read_csv("datasets/LacrossHelmets.csv")
head(lacross)
ggplot(lacross, aes(factor(model), GSI)) + geom_boxplot()
ggplot(lacross, aes(factor(model), GSI)) + geom_boxplot(aes(fill = factor(model)))
ggplot(lacross, aes(factor(model), GSI)) + geom_boxplot(aes(fill = factor(model))) + scale_fill_discrete(name = "Helmet", labels = c("SHC", "SHCAF", "SHCUL", "BUL"))
ggplot(lacross, aes(factor(model), GSI)) + geom_boxplot(aes(fill = factor(model))) + scale_fill_discrete(name = "Helmet", labels = c("SHC", "SHCAF", "SHCUL", "BUL")) + labs(title = "GSI Ranges by Helmet") + xlab(NULL)
ggplot(lacross, aes(factor(model), GSI)) + geom_boxplot(aes(fill = factor(model))) + scale_fill_discrete(name = "Helmet", labels = c("SHC", "SHCAF", "SHCUL", "BUL")) + labs(title = "GSI Ranges by Helmet") + xlab(NULL) + ylab("Gadd Severity Index")
ggplot(lacross, aes(factor(model), GSI)) + geom_boxplot(aes(fill = factor(model))) + scale_fill_discrete(name = "Helmet", labels = c("SHC", "SHCAF", "SHCUL", "BUL")) + labs(title = "GSI Ranges by Helmet") + ylab("Gadd Severity Index") + xlab(NULL)
helmet_anova <- aov(GIS ~ model, data = lacross)
helmet_anova <- aov(GIS ~ model, data = lacross)
head(lacross)
helmet_anova <- aov(GSI ~ model, data = lacross)
summary(helmet_anova)
